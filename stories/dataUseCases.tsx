import { getSimpleData } from './generateData'
import React from 'react'
import PeopleIcon from '@material-ui/icons/People'
import { ColumnCellType, Header } from '../src/columnGrid/types/header.type'

export const getTopUseCase = () => {
	const headerData: Header[] = [
		{
			id: 'deliverable',
			title: 'Deliverable',
			accessor: 'deliverableBody',
			width: '15%',
		},
		{
			id: 'wp',
			title: 'Work Package',
			tooltip: 'You can preview the tooltip in here',
			accessor: 'wpBody',
			width: '15%',
		},
		{
			id: 'activity',
			accessor: 'activityBody',
			title: 'Activity',
			width: '15%',
		},
		{
			id: 'order',
			accessor: 'order',
			title: '',
			disableNavigation: true,
			readOnly: true,
			width: '2%',
		},
		{
			id: 'task',
			accessor: 'taskContent',
			title: 'Task',
			width: '16%',
			validatorHook: value => {
				//Test
				return String(value).length < 20
			},
		},
		{
			id: 'dp',
			accessor: 'dependencies',
			title: 'DP',
			width: '2%',
			/**
			 * @todo Create a custom renderer that formats the dependecies with ,
			 * and also we get the backspace feature that will send us an empty array if we backspace
			 * **/
		},
		{
			id: 'estimatedTime',
			title: 'Est. Time',
			accessor: 'estimatedTime',
			width: '3%',
			type: ColumnCellType.Numeric,
		},
		{
			id: 'realTime',
			title: 'Real Time',
			accessor: 'realTime',
			width: '3%',
			type: ColumnCellType.Numeric,
		},
		{
			id: 'allocated',
			title: '',
			renderer: () => {
				return <PeopleIcon />
			},
			accessor: 'allocated',
			width: '3%',
		},
		{
			id: 'materials',
			title: 'Mat Costs',
			accessor: 'materials',
			width: '3%',
			type: ColumnCellType.Numeric,
		},
		{
			id: 'startDate',
			title: 'Start Date',
			accessor: 'startDate',
			width: '5%',
			type: ColumnCellType.Calendar,
			disableBackspace: true,
		},
		{
			id: 'endDate',
			title: 'End Date',
			accessor: 'endDate',
			width: '5%',
			type: ColumnCellType.Calendar,
			disableBackspace: true,
			delayEditorOpen: 1000,
		},
		{
			id: 'taskControl',
			title: 'Task Control',
			accessor: 'taskControl',
			width: '8%',
			disableNavigation: true,
			readOnly: true,
		},
	]

	const rows = [
		{
			taskId: '5f7dcb2ea805c10017779334',
			taskContent: 'Task 1',
			deliverableId: '5f7dcb2ea805c10017779330',
			deliverableBody: 'Del 1',
			activityId: '5f7dcb2ea805c10017779332',
			activityBody: 'Act 1',
			wpId: '5f7dcb2ea805c10017779331',
			wpBody: 'WP 1',
			lok: 1,
			order: 1,
			startDate: '2020-10-07',
			endDate: '2020-10-07',
			materials: 0,
			dependencies: [],
			estimatedTime: 0,
			realTime: 0,
			status: 0,
			approved: 0,
			finishDate: null,
			allocated: [],
			extraCells: [],
		},
		{
			taskId: '5f7dcb32a805c10017779336',
			taskContent: 'Task 2',
			deliverableId: '5f7dcb2ea805c10017779330',
			deliverableBody: 'Del 1',
			activityId: '5f7dcb2ea805c10017779332',
			activityBody: 'Act 1',
			wpId: '5f7dcb2ea805c10017779331',
			wpBody: 'WP 1',
			lok: 1,
			order: 2,
			startDate: '2020-10-07',
			endDate: '2020-10-07',
			materials: 0,
			dependencies: [],
			estimatedTime: 0,
			realTime: 0,
			status: 0,
			approved: 0,
			finishDate: null,
			allocated: [],
			extraCells: [],
		},
		{
			taskId: '5f7dcb34a805c10017779337',
			taskContent: 'Task 3',
			deliverableId: '5f7dcb2ea805c10017779330',
			deliverableBody: 'Del 1',
			activityId: '5f7dcb2ea805c10017779332',
			activityBody: 'Act 1',
			wpId: '5f7dcb2ea805c10017779331',
			wpBody: 'WP 1',
			lok: 1,
			order: 3,
			startDate: '2020-10-07',
			endDate: '2020-10-07',
			materials: 0,
			dependencies: [],
			estimatedTime: 0,
			realTime: 0,
			status: 0,
			approved: 0,
			finishDate: null,
			allocated: [],
			extraCells: [],
		},
		{
			taskId: '5f7dcb36a805c1001777933b',
			taskContent: 'Task 4',
			deliverableId: '5f7dcb36a805c10017779338',
			deliverableBody: 'Del 2',
			activityId: '5f7dcb36a805c1001777933a',
			activityBody: 'Act 2',
			wpId: '5f7dcb36a805c10017779339',
			wpBody: 'Wp 2',
			lok: 1,
			order: 4,
			startDate: '2020-10-07',
			endDate: '2020-10-07',
			materials: 0,
			dependencies: [],
			estimatedTime: 0,
			realTime: 0,
			status: 0,
			approved: 0,
			finishDate: null,
			allocated: [],
			extraCells: [],
		},
		{
			taskId: '5f7dcb37a805c1001777933c',
			taskContent: 'Task 5',
			deliverableId: '5f7dcb36a805c10017779338',
			deliverableBody: 'Del 2',
			activityId: '5f7dcb36a805c1001777933a',
			activityBody: 'Act 2',
			wpId: '5f7dcb36a805c10017779339',
			wpBody: 'Wp 2',
			lok: 1,
			order: 5,
			startDate: '2020-10-07',
			endDate: '2020-10-07',
			materials: 0,
			dependencies: [],
			estimatedTime: 0,
			realTime: 0,
			status: 0,
			approved: 0,
			finishDate: null,
			allocated: [],
			extraCells: [],
		},
		{
			taskId: '5f7dcb38a805c10017779340',
			taskContent: 'Task 6',
			deliverableId: '5f7dcb38a805c1001777933d',
			deliverableBody: 'Del 6',
			activityId: '5f7dcb38a805c1001777933f',
			activityBody: 'Act 6',
			wpId: '5f7dcb38a805c1001777933e',
			wpBody: 'WP 6',
			lok: 1,
			order: 6,
			startDate: '2020-10-07',
			endDate: '2020-10-07',
			materials: 0,
			dependencies: [],
			estimatedTime: 0,
			realTime: 0,
			status: 0,
			approved: 0,
			finishDate: null,
			allocated: [],
			extraCells: [],
		},
	]

	return {
		data: rows,
		headerData,
	}
}

export const getRandomUseCase = () => {
	return getSimpleData(20, 8)
}
